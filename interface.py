import tkinter as tk
from tkinter import scrolledtext, filedialog, messagebox
from langchain_ollama.llms import OllamaLLM
from langchain_core.prompts import ChatPromptTemplate
from threading import Thread

class ChatApp:
    def __init__(self, root):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root = root
        self.root.title("AI Study Assistant (Ollama)")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        self.root.geometry("800x600")
        self.root.resizable(False, False)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ LLM —á–µ—Ä–µ–∑ Ollama
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        self.model = OllamaLLM(model="qwen3:1.7b")
        self.setup_prompt_template()
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –≤ —Å—Ç–∏–ª–µ Telegram
        self.bg_color = "#f5f5f5"      # –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
        self.user_bg = "#e3f2fd"       # –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.ai_bg = "#ffffff"         # –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò
        self.text_color = "#212121"    # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        self.accent_color = "#0088cc"  # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç (–∫–Ω–æ–ø–∫–∏)
        
        self.setup_ui()
        
    def setup_prompt_template(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏.
        –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å —É—á–µ–±–æ–π
        """
        template = '''
        You are an AI assistant designed to help students with their studies.
        Your tasks include:
        - Explaining complex concepts in simple terms
        - Helping with homework and assignments
        - Providing study resources and references
        - Answering questions about various subjects
        
        Here is some relevant context: {study_materials}
        
        Student's question: {question}
        
        Please provide a clear, detailed answer with examples where appropriate.
        If the question relates to specific subjects (math, physics, programming etc.),
        tailor your response accordingly. /no_think
        '''
        self.prompt = ChatPromptTemplate.from_template(template)
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å retriever –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        # –ü—Ä–∏–º–µ—Ä –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
        # from langchain_community.vectorstores import Chroma
        # from langchain_community.embeddings import OllamaEmbeddings
        # self.embeddings = OllamaEmbeddings(model="qwen3:1.7b")
        # self.vectorstore = Chroma(embedding_function=self.embeddings)
        # self.retriever = self.vectorstore.as_retriever()
        
    def setup_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg=self.bg_color)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ)
        self.chat_history = scrolledtext.ScrolledText(
            main_frame,
            wrap=tk.WORD,           # –ü–µ—Ä–µ–Ω–æ—Å –ø–æ —Å–ª–æ–≤–∞–º
            width=70,               # –®–∏—Ä–∏–Ω–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            height=25,              # –í—ã—Å–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
            font=("Segoe UI", 11),  # –®—Ä–∏—Ñ—Ç
            bg=self.bg_color,       # –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
            fg=self.text_color,     # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            padx=10, pady=10,      # –û—Ç—Å—Ç—É–ø—ã
            state='disabled'       # –ó–∞–ø—Ä–µ—Ç –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        self.chat_history.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        input_frame = tk.Frame(main_frame, bg=self.bg_color)
        input_frame.pack(fill=tk.X, pady=(10, 0))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.user_input = tk.Text(
            input_frame,
            height=3,               # –í—ã—Å–æ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
            font=("Segoe UI", 11),  # –®—Ä–∏—Ñ—Ç
            bg="white",             # –§–æ–Ω
            fg=self.text_color,     # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            padx=10, pady=10        # –û—Ç—Å—Ç—É–ø—ã
        )
        self.user_input.pack(side=tk.LEFT, fill=tk.X, expand=True)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter (–±–µ–∑ Shift)
        self.user_input.bind("<Return>", self.send_message_event)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_btn = tk.Button(
            input_frame,
            text="‚û§",                     # –°–∏–º–≤–æ–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
            font=("Segoe UI", 12, "bold"), # –®—Ä–∏—Ñ—Ç
            bg=self.accent_color,          # –¶–≤–µ—Ç —Ñ–æ–Ω–∞
            fg="white",                    # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            activebackground=self.accent_color,  # –¶–≤–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
            activeforeground="white",
            borderwidth=0,                # –ë–µ–∑ —Ä–∞–º–∫–∏
            command=self.send_message      # –û–±—Ä–∞–±–æ—Ç—á–∏–∫
        )
        send_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤, —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
        upload_btn = tk.Button(
            input_frame,
            text="üìÅ",                    # –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞
            font=("Segoe UI", 12),
            bg=self.bg_color,
            fg=self.accent_color,
            activebackground=self.bg_color,
            activeforeground=self.accent_color,
            borderwidth=0,
            command=self.upload_file      # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        )
        upload_btn.pack(side=tk.RIGHT, padx=(0, 5))
    
    def upload_file(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤, –ª–µ–∫—Ü–∏–π)
        TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (PDF, DOCX)
        """
        file_path = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                self.user_input.insert(tk.END, f"\n[File content]\n{content[:1000]}...")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —á–∞—Ç–µ
                self.add_message("user", f"Uploaded study material: {file_path}\nContent preview: {content[:200]}...")
                
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞
                # self.vectorstore.add_texts([content])
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to read file: {str(e)}")
    
    def send_message_event(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç —á–∏—Å—Ç—ã–π Enter (–±–µ–∑ Shift)
        """
        if event.state == 0 and event.keysym == "Return":
            self.send_message()
            return "break"  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    
    def send_message(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = self.user_input.get("1.0", tk.END).strip()
        if not message:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        self.add_message("user", message)
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.user_input.delete("1.0", tk.END)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
        # —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        Thread(target=self.get_ai_response, args=(message,)).start()
    
    def get_ai_response(self, question):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò-–º–æ–¥–µ–ª–∏.
        TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        """
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
            # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤ retriever.invoke(question)
            study_materials = "Relevant study materials will appear here..."
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É: –ø—Ä–æ–º–ø—Ç -> –º–æ–¥–µ–ª—å
            chain = self.prompt | self.model
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            response = chain.invoke({
                'study_materials': study_materials,
                'question': question
            })
            
            # TODO: –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥:
            # response_stream = chain.stream({'study_materials': study_materials, 'question': question})
            # for chunk in response_stream:
            #     self.update_message("ai", chunk)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ
            self.add_message("ai", response)
                
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
            self.add_message("system", f"Error: {str(e)}")
    
    def add_message(self, sender, message):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        :param sender: 'user', 'ai' –∏–ª–∏ 'system'
        :param message: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.chat_history.config(state='normal')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
        if sender == "user":
            bg = self.user_bg      # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prefix = "You: "       # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif sender == "ai":
            bg = self.ai_bg        # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò
            prefix = "Assistant: " # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ò–ò (–∏–∑–º–µ–Ω–µ–Ω–æ)
        else:
            bg = self.bg_color     # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            prefix = "System: "
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.chat_history.tag_config(
            sender, 
            background=bg, 
            lmargin1=10,  # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            lmargin2=10,  # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
            rmargin=10    # –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ–≥–∞–º–∏
        self.chat_history.insert(tk.END, prefix, sender+"_prefix")
        self.chat_history.insert(tk.END, message + "\n\n", sender)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª–µ –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.chat_history.config(state='disabled')
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞
        self.chat_history.see(tk.END)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    root = tk.Tk()
    app = ChatApp(root)
    root.mainloop()